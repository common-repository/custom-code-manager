<?php

/**
 * Prevent Direct Access
 */
defined( 'ABSPATH' ) or die( "Restricted access!" );

/**
 * Register text domain
 */
function spacexchimp_p020_textdomain() {

    // Put value of plugin constants into an array for easier access
    $plugin_combo = spacexchimp_p020_plugin();

    load_plugin_textdomain( $plugin_combo['text'], false, $plugin_combo['dir'] . '/languages/' );
}
add_action( 'init', $plugin_combo['prefix'] . '_textdomain' );

/**
 * Print direct link to the plugin administration page
 *
 * Fetches array of links generated by WordPress Plugin admin page ( Deactivate | Edit )
 * and inserts a link to the plugin admin page
 */
function spacexchimp_p020_settings_link( $links ) {

    // Put value of plugin constants into an array for easier access
    $plugin_combo = spacexchimp_p020_plugin();

    // Declare variables
    $text_settings = __( 'Settings', $plugin_combo['text'] );
    $url_settings = admin_url( 'admin.php?page=code/html' );
    $link_settings = '<a href="' . $url_settings . '">' . $text_settings . '</a>';

    array_unshift( $links, $link_settings );

    // Declare variables
    $url_upgrade = "https://www.spacexchimp.com/plugins/" . $plugin_combo['slug'] . "-pro.html";
    $text_upgrade = __( 'Upgrade to PRO', $plugin_combo['text'] );
    $link_upgrade = '<a href="' . $url_upgrade . '" target="_blank"><b style="color:#0f9f44;">' . $text_upgrade . '</b></a>';

    array_unshift( $links, $link_upgrade );

    return $links;
}
add_filter( 'plugin_action_links_' . $plugin_combo['base'], $plugin_combo['prefix'] . '_settings_link' );

/**
 * Print additional links to the plugin meta row
 */
function spacexchimp_p020_plugin_row_meta( $links, $file ) {

    // Put value of plugin constants into an array for easier access
    $plugin_combo = spacexchimp_p020_plugin();

    if ( strpos( $file, $plugin_combo['slug'] . '.php' ) !== false ) {

        // Declare variables
        $url_donate = "https://www.spacexchimp.com/donate.html";
        $text_donate = __( 'Donate', $plugin_combo['text'] );
        $link_donate = '<a href="' . $url_donate . '" target="_blank"><span class="dashicons dashicons-heart" style="color:pink;"></span> ' . $text_donate . '</a>';

        $new_links = array(
                           'donate' => $link_donate
                           );

        $links = array_merge( $links, $new_links );
    }

    return $links;
}
add_filter( 'plugin_row_meta', $plugin_combo['prefix'] . '_plugin_row_meta', 10, 2 );

/**
 * Register the 'Code' menu item in the Admin Menu
 */
function spacexchimp_p020_register_admin_menu() {

    // Put value of plugin constants into an array for easier access
    $plugin_combo = spacexchimp_p020_plugin();

    // Return if the 'Code' menu item is already exists
    if ( !empty ( $GLOBALS['admin_page_hooks']['code'] ) ) {
        return;
    }

    $page_title = 'Code';
    $menu_title = 'Code';
    $capability = 'manage_options';
    $menu_slug  = 'code';
    $function   = null;
    $icon_url   = 'dashicons-admin-generic';
    $position   = 66;

    add_menu_page( $page_title, $menu_title, $capability, $menu_slug, $function, $icon_url, $position );
}
add_action( 'admin_menu', $plugin_combo['prefix'] . '_register_admin_menu' );

/**
 * Remove the 'Code' sub menu item in the brand menu item
 */
function spacexchimp_p020_remove_submenu_item() {
    remove_submenu_page( 'code', 'code' );
}
add_action( 'admin_menu', $plugin_combo['prefix'] . '_remove_submenu_item', 999 );

/**
 * Register settings
 */
function spacexchimp_p020_register_settings() {

    // Put value of plugin constants into an array for easier access
    $plugin_combo = spacexchimp_p020_plugin();

    register_setting( $plugin_combo['settings'] . '_settings_group_si', $plugin_combo['settings'] . '_service_info' );
}
add_action( 'admin_init', $plugin_combo['prefix'] . '_register_settings' );

/**
 * Runs during the plugin activation
 */
function spacexchimp_p020_activation() {

    // Put value of plugin constants into an array for easier access
    $plugin_combo = spacexchimp_p020_plugin();

    // Read the plugin service information from the database and put it into an array
    $info = get_option( $plugin_combo['settings'] . '_service_info' );

    // Make the "$info" array if the plugin service information in the database is not exist
    if ( ! is_array( $info ) ) {
        $info = array();
    }

    // Get the activation date of the plugin from the database
    $activation_date = !empty( $info['activation_date'] ) ? $info['activation_date'] : '';

    if ( $activation_date == '' ) {
        $info['activation_date'] = time();
        update_option( $plugin_combo['settings'] . '_service_info', $info );
    }
}
register_activation_hook( $plugin_combo['file'], $plugin_combo['prefix'] . '_activation' );
